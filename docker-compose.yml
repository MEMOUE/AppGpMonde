version: '3.8'

services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./BackGp
      dockerfile: Dockerfile
    container_name: spring-backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"
    volumes:
      - ./BackGp/uploads:/app/uploads
    networks:
      - app-network

  # Frontend Angular (build only)
  frontend:
    build:
      context: ./GpFront
      dockerfile: Dockerfile
    container_name: angular-frontend
    restart: always
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      # Le répertoire dist sera accessible à Nginx sur l’hôte
      - ./GpFront/dist:/usr/share/nginx/html

  # Certbot (optionnel - pour HTTPS avec Let's Encrypt)
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot:/var/www/certbot
      - ./ssl:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d yourdomain.com -d www.yourdomain.com

volumes:
  mysql-data:

networks:
  app-network:
    driver: bridge
